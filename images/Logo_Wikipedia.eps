%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (ImageMagick)
%%Title: (Logo_Wikipedia.eps)
%%CreationDate: (2014-01-13T13:43:50+01:00)
%%BoundingBox: -0 -0 16 16
%%HiResBoundingBox: 0 0 16 16
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Pages: 1
%%EndComments

%%BeginDefaults
%%EndDefaults

%%BeginProlog
%
% Display a color image.  The image is displayed in color on
% Postscript viewers or printers that support color, otherwise
% it is displayed as grayscale.
%
/DirectClassPacket
{
  %
  % Get a DirectClass packet.
  %
  % Parameters:
  %   red.
  %   green.
  %   blue.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/DirectClassImage
{
  %
  % Display a DirectClass image.
  %
  systemdict /colorimage known
  {
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { DirectClassPacket } false 3 colorimage
  }
  {
    %
    % No colorimage operator;  convert to grayscale.
    %
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { GrayDirectClassPacket } image
  } ifelse
} bind def

/GrayDirectClassPacket
{
  %
  % Get a DirectClass packet;  convert to grayscale.
  %
  % Parameters:
  %   red
  %   green
  %   blue
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/GrayPseudoClassPacket
{
  %
  % Get a PseudoClass packet;  convert to grayscale.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassPacket
{
  %
  % Get a PseudoClass packet.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassImage
{
  %
  % Display a PseudoClass image.
  %
  % Parameters:
  %   class: 0-PseudoClass or 1-Grayscale.
  %
  currentfile buffer readline pop
  token pop /class exch def pop
  class 0 gt
  {
    currentfile buffer readline pop
    token pop /depth exch def pop
    /grays columns 8 add depth sub depth mul 8 idiv string def
    columns rows depth
    [
      columns 0 0
      rows neg 0 rows
    ]
    { currentfile grays readhexstring pop } image
  }
  {
    %
    % Parameters:
    %   colors: number of colors in the colormap.
    %   colormap: red, green, blue color packets.
    %
    currentfile buffer readline pop
    token pop /colors exch def pop
    /colors colors 3 mul def
    /colormap colors string def
    currentfile colormap readhexstring pop pop
    systemdict /colorimage known
    {
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { PseudoClassPacket } false 3 colorimage
    }
    {
      %
      % No colorimage operator;  convert to grayscale.
      %
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { GrayPseudoClassPacket } image
    } ifelse
  } ifelse
} bind def

/DisplayImage
{
  %
  % Display a DirectClass or PseudoClass image.
  %
  % Parameters:
  %   x & y translation.
  %   x & y scale.
  %   label pointsize.
  %   image label.
  %   image columns & rows.
  %   class: 0-DirectClass or 1-PseudoClass.
  %   compression: 0-none or 1-RunlengthEncoded.
  %   hex color packets.
  %
  gsave
  /buffer 512 string def
  /byte 1 string def
  /color_packet 3 string def
  /pixels 768 string def

  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  /Times-Roman findfont pointsize scalefont setfont
  x y scale
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  currentfile buffer readline pop
  token pop /class exch def pop
  currentfile buffer readline pop
  token pop /compression exch def pop
  class 0 gt { PseudoClassImage } { DirectClassImage } ifelse
  grestore
} bind def
%%EndProlog
%%Page:  1 1
%%PageBoundingBox: 0 0 16 16
userdict begin
DisplayImage
0 0
16 16
12
16 16
0
0
FFFFFFFFFFFFFFFFFFFFFFFFD7D7D7F3F3F3FFFFFFFEFEFEFCFCFCFFFFFFEBEBEBEDEDEDFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFDFDDEDEDE545454F9F9F9FDFDFDCCCCCCB1B1B1ACACAC
A4A4A44E4E4EADADADFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEF7F7F7828282D5D5D5FBFBFBE2E2E2
595959A4A4A4C3C3C3B9B9B9A0A0A0828282969696F9F9F9FFFFFFFFFFFFF1F1F1EFEFEF999999
6C6C6C6A6A6A575757D7D7D7CACACAC1C1C1C0C0C09E9E9E9797975A5A5A939393FFFFFFFDFDFD
F6F6F6F1F1F10B0B0B434343686868B0B0B0C5C5C5D3D3D3ACACAC9D9D9DA5A5A5999999545454
414141E5E5E5F9F9F9ECECECF4F4F4FFFFFF7B7B7BC5C5C5DFDFDFD7D7D7DEDEDE787878999999
A9A9A99292927F7F7F545454949494FAFAFA959595EFEFEFFFFFFFB7B7B79E9E9ED5D5D5C8C8C8
E1E1E1BEBEBEB7B7B79B9B9B8D8D8D8282824646464F4F4FF2F2F2ECECECECECECFFFFFFC1C1C1
C7C7C7E1E1E1CACACAC1C1C1BEBEBEBEBEBE9D9D9D979797717171414141414141EFEFEFF6F6F6
E3E3E3ECECECDADADACECECEE5E5E5BEBEBED3D3D3BABABA5656563F3F3F9090906F6F6F434343
555555E3E3E3ACACACEAEAEADFDFDFC3C3C39B9B9BB3B3B3D8D8D8B5B5B5A7A7A7909090929292
8484845F5F5F2F2F2F696969F3F3F3C1C1C1EDEDEDD3D3D3B3B3B38E8E8E9D9D9DD0D0D0ABABAB
B9B9B99090908E8E8E7272725151511A1A1AB9B9B9FEFEFEC8C8C8D3D3D3C7C7C7D1D1D1CCCCCC
B9B9B9BABABA9D9D9DA0A0A08D8D8D4646462E2E2E484848424242FFFFFFFFFFFFE4E4E4888888
BEBEBED1D1D19292928B8B8B9797979B9B9B9B9B9B8282826A6A6A4646462C2C2CD4D4D4FFFFFF
FFFFFFFFFFFFE7E7E7B1B1B1A9A9A99090908E8E8E898989929292767676666666464646272727
C2C2C2FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1F1F1B6B6B68E8E8E8686867F7F7F727272565656
3E3E3E6A6A6AE2E2E2FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEEEEEEC6C6C6
A9A9A9A4A4A4B5B5B5E7E7E7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

end
%%PageTrailer
%%Trailer
%%EOF
